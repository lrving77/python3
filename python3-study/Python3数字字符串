#!/bin/bash/python3
# -*- coding:UTF-8 -*-
#file_name:study-python

1、Python3数字(Number)
Python支持3种不同的数值类型:
整数(int)
浮点型(float)
复数(complex)

数据类型是允许改变的,如何改变数字数据类型的值,就将重新分配内存空间
在变量赋值时Number对象将被创建:
a = 10
b = 20

使用"del"删除一些数字对象的引用
"del"的语句格式是:
del num1[,num2[,num3[...,numN]]]

通过"del"删除单个或多个对象的引用,例如:
del a
del a,b


#============Python数字类型转换============
对数据内置的类型进行转换,数据类型的转换,只需将数据类型作为函数名即可
a = 10
b = 20

print(float(a))
print(complex(a))
print(complex(a,b))

输出结果为:
10.0
(10+0j)
(10+20j)

#============Python数字运算============
Python解释器可以作为一个简单的计算器,您可以在解释器里输入一个表达式,它将输出表达式的值
print(5 + 4)  #加法
print(4.3-1)  #减法
print(3 * 7)  #乘法
print(2 / 4)  #2除以4得到一个浮点数 0.5
print(2 // 4) #2除以4得到一个整数 0
print(4 % 3)  #取余
print(2 ** 6) #乘方

特殊的:
print(5 // 4)
print(5.0 // 4)

输出结果为:
9
3.3
21
0.5
0
1
64
1
1.0


注意: 
    1、在不同的机器上浮点运算的结果可能会不一样
    2、// 得到的并不一定是整数类型的数,它与分母分子的数据类型有关系

#不同类型的数混合运算时会将整数转换为浮点数



#============Python数字函数============
abs(x)	   返回数字的绝对值，如abs(-10) 返回 10
ceil(x)	   返回数字的上入整数，如math.ceil(4.1) 返回 5
cmp(x, y)  如果 x < y 返回 -1, 如果 x == y 返回 0, 如果 x > y 返回 1; Python 3 已废弃，使用 (x>y)-(x<y) 替换
exp(x)	   返回e的x次幂(ex),如math.exp(1) 返回2.718281828459045
fabs(x)	   返回数字的绝对值,如math.fabs(-10) 返回10.0
floor(x)   返回数字的下舍整数,如math.floor(4.9)返回 4
log(x)	   如math.log(math.e)返回1.0,math.log(100,10)返回2.0
log10(x)   返回以10为基数的x的对数，如math.log10(100)返回 2.0
max(x1, x2,...)	  返回给定参数的最大值,参数可以为序列
min(x1, x2,...)	  返回给定参数的最小值,参数可以为序列
modf(x)	          返回x的整数部分与小数部分,两部分的数值符号与x相同,整数部分以浮点型表示
pow(x, y)	      x**y 运算后的值
round(x [,n])	  返回浮点数x的四舍五入值,如给出n值,则代表舍入到小数点后的位数
sqrt(x)	          返回数字x的平方根



2、Python字符串:
字符串是Python中最常用的数据类型,使用(''或者"")创建字符串
Python不支持单字符类型,单字符在Python中也是作为一个字符串使用
创建字符串:
a = 'hello'
b = 'world'

读取字符串:
print(a)
print(b)

读取某一个字符:
print(a[4])
print(b[1:4])

执行结果:
hello
world
o
orl

Python字符串更新
截取字符串的一部分并与其他字段拼接:
a = 'hello world'
print("更新后的字符串: ",a[:6]+'james')

输出结果为:
更新后的字符串:  hello james


#============Python字符串运算符============
+        字符串连接
*        重复输出字符串
[]       通过索引获取字符串中字符
[ : ]    截取字符串中的一部分,遵循左闭右开原则, str[0,2] 是不包含第 3 个字符的
in       成员运算符 - 如果字符串中包含给定的字符返回 True
not in   成员运算符 - 如果字符串中不包含给定的字符返回 True
r/R      原始字符串 - 原始字符串: 所有的字符串都是直接按照字面的意思来使用,没有转义特殊或不能打印的字符
         原始字符串除在字符串的第一个引号前加上字母 r（可以大小写）以外,与普通字符串有着几乎完全相同的语法
%        格式字符串


a = 'Lakers'
b = 'James'
c = 23

print(a + b)      #a加上b
print(a * 2)      #a输出两次
print(a[1])       #输出a的第二个元素
print(a[1:4])     #输出a从第2个元素到第4个元素的所有元素
if ("L" in a):
    print("字符L是a变量的一个元素")
else:
    print(("字符L不是a变量的元素"))

if ("23" not in b):
    print("23号不是变量b的元素")
else:
    print("23号是变量b的元素")

print("lakers james 23\nclippers leonard 2")
print(r'lakers james 23\nclippers leonard 2')
print(R'lakers james 23\nclippers leonard 2')


输出结果为:
LakersJames
LakersLakers
a
ake
字符L是a变量的一个元素
23号不是变量b的元素
lakers james 23
clippers leonard 2
lakers james 23\nclippers leonard 2
lakers james 23\nclippers leonard 2


#============Python字符串格式化============
字符串格式化符号:

%c	 格式化字符及其ASCII码
%s	 格式化字符串
%d	 格式化整数
%u	 格式化无符号整型
%o	 格式化无符号八进制数
%x	 格式化无符号十六进制数
%X	 格式化无符号十六进制数(大写)
%f	 格式化浮点数字，可指定小数点后的精度
%e	 用科学计数法格式化浮点数
%E	 作用同%e，用科学计数法格式化浮点数
%g	 %f和%e的简写
%G	 %f 和 %E 的简写
%p	 用十六进制数格式化变量的地址

格式化操作符辅助指令:

*	   定义宽度或者小数点精度
-	   用做左对齐
+	   在正数前面显示加号( + )
<sp>   在正数前面显示空格
#	   在八进制数前面显示零('0')，在十六进制前面显示'0x'或者'0X'(取决于用的是'x'还是'X')
0	   显示的数字前面填充'0'而不是默认的空格
%	   '%%'输出一个单一的'%'
(var)  映射变量(字典参数)
m.n.   m 是显示的最小总宽度,n 是小数点后的位数(如果可用的话)


print("I am %s Fans" % ("Lakers Lebron.James's") )  #格式化字符串
print("I am %d year old" % (10))   #格式化整数
print("I am a university student,my name is %s and I am %d year old" % ('lrving',18) )

输出结果为:
I am Lakers Lebron.James's Fans
I am 18 year old
I am a university student,my name is lrving and I am 18 year old

#f-string--重要'
f-string 是 python3.6 之后版本添加的,称之为字面量格式化字符串,是新的格式化字符串的语法
语法格式: f'{ }'
以前的:
a = 'lakers'
print('hello %s' % a)
输出结果为:
hello lakers

现在的:
a = 'james'
print(f'hello {a}')  #替换变量
print(f'{1+2}')      #使用表达式
输出结果为:
hello james
3

b = {'name':'james','country':'usa','number':23}
print(f'{b["name"]}:{b["number"]}')
输出结果为:
james:23

这种方式明显更简单了，不用再去判断使用 %s，还是 %d
在Python3.8的版本中可以使用 "=" 符号来拼接运算表达式与结果:
a = 10
print(f'{a+1}')   #Python2.7,只显示结果,不显示表达式
输出结果为:
11

print(f'{a+1=}')  #Python3.8,将结果和表达式一并列出
输出结果为:
'10+1=1'



#============Python Unicode字符串============
在Python2中,普通字符串是以8位ASCII码进行存储的,而Unicode字符串则存储为16位unicode字符串,这样能够表示更多的字符集;使用的语法是在字符串前面加上前缀"u"
在Python3中所有的字符串都是Unicode字符串

#============Python的字符串内建函数============
Python常用字符串内建函数如下:
1、capitalize()
将字符串的第一个字符转换为大写
参数:
无
示例:
a = 'lakersjames23'
print(a.capitalize())
输出结果为:
Lakersjames23

2、center(width, fillchar)
返回一个指定的宽度"width"居中的字符串,"fillchar"为填充的字符,默认为空格
参数:
width     -- 字符串的总宽度
fillchar  -- 填充字符
示例:
a = 'lakersjames23'
print(a.center(30,'*'))  #表明一共30的宽度(width),使用"*"作为填充字符
输出结果为:
********lakersjames23*********

3、count(str, beg= 0,end=len(string))
返回字符"e"在"变量a"里面出现的次数,如果 beg 或者 end 指定则返回指定范围内"e"出现的次数
参数:
sub   -- 搜索的子字符串
start -- 字符串开始搜索的位置;默认为第一个字符,第一个字符索引值为0
end   -- 字符串中结束搜索的位置;字符中第一个字符的索引为 0;默认为字符串的最后一个位置
示例:
a = 'lakersjames23'
print(a.count('e',0,10))  #搜索0-10的索引中字符"e"在变量"a"出现的次数
输出结果为:
2

4、bytes.decode(encoding="utf-8", errors="strict")
Python3中没有 decode方法,但我们可以使用bytes对象的decode()方法来解码给定的bytes 对象,这个bytes对象可以由a.encode()来编码返回
参数:
encoding -- 要使用的编码，如"UTF-8"
errors -- 设置不同错误的处理方案;默认为 'strict',意为编码错误引起一个UnicodeError; 其他可能得值有 'ignore', 'replace', 
          'xmlcharrefreplace', 'backslashreplace' 以及通过 codecs.register_error() 注册的任何值
示例:
a = "爱学习的小猫"
a_utf8 = a.encode("UTF-8")
a_gbk = a.encode("GBK")

#编码
print(a_utf8)
print(a_gbk)
#解码
print(a_utf8.decode('UTF-8','strict'))
print(a_gbk.decode('GBK','strict'))
输出结果为:
b'\xe7\x88\xb1\xe5\xad\xa6\xe4\xb9\xa0\xe7\x9a\x84\xe5\xb0\x8f\xe7\x8c\xab'
b'\xb0\xae\xd1\xa7\xcf\xb0\xb5\xc4\xd0\xa1\xc3\xa8'
爱学习的小猫
爱学习的小猫
	
5、encode(encoding='UTF-8',errors='strict')
以encoding指定的编码格式编码字符串,如果出错默认报一个ValueError的异常,除非errors指定的是'ignore'或者'replace'
encoding -- 要使用的编码，如"UTF-8"
errors -- 设置不同错误的处理方案;默认为 'strict',意为编码错误引起一个UnicodeError; 其他可能得值有 'ignore', 'replace', 
          'xmlcharrefreplace', 'backslashreplace' 以及通过 codecs.register_error() 注册的任何值
示例:
a = "爱学习的小猫"
a_utf8 = a.encode("UTF-8")
a_gbk = a.encode("GBK")

#编码
print(a_utf8)
print(a_gbk)
#解码
print(a_utf8.decode('UTF-8','strict'))
print(a_gbk.decode('GBK','strict'))
输出结果为:
b'\xe7\x88\xb1\xe5\xad\xa6\xe4\xb9\xa0\xe7\x9a\x84\xe5\xb0\x8f\xe7\x8c\xab'
b'\xb0\xae\xd1\xa7\xcf\xb0\xb5\xc4\xd0\xa1\xc3\xa8'
爱学习的小猫
爱学习的小猫

6、endswith(suffix, beg=0, end=len(string))
检查字符串是否以 obj 结束,如果beg 或者 end 指定则检查指定的范围内是否以 obj 结束,如果是,返回 True,否则返回 False.
参数:
suffix -- 该参数可以是一个字符串或者是一个元素
start  -- 字符串中的开始位置
end    -- 字符中结束位置
示例:
a = 'lakersjames23'
b = '23'
print(a.endswith(b))
print(a.endswith(b,0,13))
b = '7'
print(a.endswith(b))
print(a.endswith(b,0,13))
输出结果为:
True
True
False
False   

7、expandtabs(tabsize=8)
把字符串string中的tab符号转为空格,tab符号默认的空格数是8
参数:
tabsize -- 指定转换字符串中的 tab 符号('\t')转为空格的字符数

示例:
输出结果为:
	
8、find(str, beg=0, end=len(string))
检测 str 是否包含在字符串中,如果指定范围 beg 和 end ,则检查是否包含在指定范围内,如果包含返回开始的索引值,否则返回-1
参数:
示例:
输出结果为:

9、index(str, beg=0, end=len(string))
跟 find()方法一样,只不过如果str不在字符串中会报一个异常.
参数:
示例:
输出结果为:

10、isalnum()
如果字符串至少有一个字符并且所有字符都是字母或数字则返 回 True,否则返回 False
参数:
示例:
输出结果为:

11、isalpha()
如果字符串至少有一个字符并且所有字符都是字母则返回 True, 否则返回 False
参数:
示例:
输出结果为:

12、isdigit()
如果字符串只包含数字则返回 True 否则返回 False..
参数:
示例:
输出结果为:

13、islower()
如果字符串中包含至少一个区分大小写的字符，并且所有这些(区分大小写的)字符都是小写，则返回 True，否则返回 False
参数:
示例:
输出结果为:

14、isnumeric()
如果字符串中只包含数字字符，则返回 True，否则返回 False
参数:
示例:
输出结果为:

15、isspace()
如果字符串中只包含空白，则返回 True，否则返回 False.
参数:
示例:
输出结果为:

16、istitle()
如果字符串是标题化的(见 title())则返回 True，否则返回 False
参数:
示例:
输出结果为:

17、isupper()
如果字符串中包含至少一个区分大小写的字符，并且所有这些(区分大小写的)字符都是大写，则返回 True，否则返回 False
参数:
示例:
输出结果为:

18、join(seq)
以指定字符串作为分隔符，将 seq 中所有的元素(的字符串表示)合并为一个新的字符串
参数:
示例:
输出结果为:

19、len(string)
返回字符串长度
参数:
示例:
输出结果为:

20、ljust(width[, fillchar])
返回一个原字符串左对齐,并使用 fillchar 填充至长度 width 的新字符串，fillchar 默认为空格。
参数:
示例:
输出结果为:

21、lower()
转换字符串中所有大写字符为小写.
参数:
示例:
输出结果为:

22、lstrip()
截掉字符串左边的空格或指定字符。
参数:
示例:
输出结果为:

23、maketrans()
创建字符映射的转换表，对于接受两个参数的最简单的调用方式，第一个参数是字符串，表示需要转换的字符，第二个参数也是字符串表示转换的目标。
参数:
示例:
输出结果为:

24、max(str)
返回字符串 str 中最大的字母。
参数:
示例:
输出结果为:

25、min(str)
返回字符串 str 中最小的字母。
参数:
示例:
输出结果为:

26、replace(old, new [, max])
把 将字符串中的 str1 替换成 str2,如果 max 指定，则替换不超过 max 次。
参数:
示例:
输出结果为:

27、rfind(str, beg=0,end=len(string))
类似于 find()函数，不过是从右边开始查找.
参数:
示例:
输出结果为:

28、rindex( str, beg=0, end=len(string))
类似于 index()，不过是从右边开始.
参数:
示例:
输出结果为:

29、rjust(width,[, fillchar])
返回一个原字符串右对齐,并使用fillchar(默认空格）填充至长度 width 的新字符串
参数:
示例:
输出结果为:

30、rstrip()
删除字符串字符串末尾的空格.
参数:
示例:
输出结果为:

31、split(str="", num=string.count(str))
num=string.count(str)) 以 str 为分隔符截取字符串，如果 num 有指定值，则仅截取 num+1 个子字符串
参数:
示例:
输出结果为:

32、splitlines([keepends])
按照行('\r', '\r\n', \n')分隔，返回一个包含各行作为元素的列表，如果参数 keepends 为 False，不包含换行符，如果为 True，则保留换行符。
参数:
示例:
输出结果为:

33、startswith(substr, beg=0,end=len(string))
检查字符串是否是以指定子字符串 substr 开头，是则返回 True，否则返回 False。如果beg 和 end 指定值，则在指定范围内检查。
参数:
示例:
输出结果为:

34、strip([chars])
在字符串上执行 lstrip()和 rstrip()
参数:
示例:
输出结果为:

35、swapcase()
将字符串中大写转换为小写，小写转换为大写
参数:
示例:
输出结果为:

36、title()
返回"标题化"的字符串,就是说所有单词都是以大写开始，其余字母均为小写(见 istitle())
参数:
输出结果为:

37、translate(table, deletechars="")
根据 str 给出的表(包含 256 个字符)转换 string 的字符, 要过滤掉的字符放到 deletechars 参数中
参数:
示例:
输出结果为:

38、upper()
转换字符串中的小写字母为大写
参数:
示例:
输出结果为:

39、zfill (width)
返回长度为 width 的字符串，原字符串右对齐，前面填充0
参数:
示例:
输出结果为:

40、isdecimal()
检查字符串是否只包含十进制字符，如果是返回 true，否则返回 false
参数:
示例:
输出结果为:



































