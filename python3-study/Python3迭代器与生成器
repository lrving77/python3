#!/bin/bash/python3
# -*- coding:UTF-8 -*-
#file_name:study-python

#============Python3迭代器与生成器============

#======迭代器======
迭代是Python最强大的功能之一,是访问集合元素的一种方式
迭代器是一个可以记住遍历的位置的对象
迭代器对象从集合的第一个元素开始访问,直到所有的元素被访问完结束;迭代器只能往前不会后退
迭代器有两个基本的方法：iter() 和 next()
字符串,列表或元组对象都可用于创建迭代器:

list = ['lakers','james',23,'cavaliers','lrving',2.0]
a = iter(list)  #创建迭代器对象
print(next(a))  #输出迭代器的下一个元素
print(next(a))
print(next(a))
输出结果为:
lakers
james
23

#什么是迭代？
1、迭代需要重复进行某一操作
2、本次迭代的要依赖上一次的结果继续往下做,如果中途有任何停顿,都不能算是迭代

#迭代对象
通俗的说就是在每一种数据类型对象中,都会有有一个__iter__()方法,正是因为这个方法,才使得这些基本数据类型变为可迭代

#迭代器
通俗来讲任何具有__next__()方法的对象都是迭代器,对迭代器调用__next__()方法可以获取下一个值

#如何判断一个对象是否是可迭代呢？使用collections模块的Iterable类型判断
list = ['lakers','james',23,'cavaliers','lrving',2.0]
from collections import Iterable
print(isinstance(list,Iterable))     #判断一个列表是否可迭代
print(isinstance((1,2,3),Iterable))  #判断一个元组是否可迭代
print(isinstance(23,Iterable))       #判断一个数字是否可迭代
输出结果为:
True
True
False

#迭代器对象可以使用常规for语句进行遍历
list = ['lakers','james',23,'cavaliers','lrving',2.0]
a = iter(list)
for x in a:
    print(x,end=" ")
输出结果为:
lakers james 23 cavaliers lrving 2.0

#也可以使用 next() 函数
import sys   #引入sys模块
list = ['lakers','james',23,'cavaliers','lrving',2.0]
a = iter(list)  #创建迭代对象
while True:
    try:
        print(next(a))
    except StopIteration:
        sys.exit()
输出结果为:
lakers
james
23
cavaliers
lrving
2.0

#创建一个迭代器
把一个类作为一个迭代器使用需要在类中实现两个方法 __iter__() 与 __next__()
如果你已经了解的面向对象编程,就知道类都有一个构造函数,Python 的构造函数为 __init__(),它会在对象初始化的时候执行
__iter__()方法返回一个特殊的迭代器对象,这个迭代器对象实现了 __next__() 方法并通过 StopIteration 异常标识迭代的完成
__next__()方法会返回下一个迭代器对象
创建一个返回数字的迭代器,初始值为 1,逐步递增 1

class lrving:
    def __iter__(self):
        self.a = 1
        return self
    def __next__(self):
        x = self.a
        self.a += 1
        return x
myclass = lrving()
myiter = iter(myclass)

print(next(myiter))
print(next(myiter))
print(next(myiter))

输出结果为:
1
2
3


#StopIteration
StopIteration异常用于标识迭代的完成,防止出现无限循环的情况,在 __next__() 方法中我们可以设置在完成指定循环次数后触发 StopIteration 异常来结束迭代
class lrving:
    def __iter__(self):
        self.a = 1
        return self
    def __next__(self):
        if self.a <= 10:
            x = self.a
            self.a += 1
            return x
        else:
            raise StopIteration

myclass = lrving()
myiter = iter(myclass)

for x in myiter:
    print(x)

输出结果为:
1
2
3
4
5
6
7
8
9
10

#======生成器======
生成器是一个用简单的方式来完成迭代;简单来说,Python的生成器是一个返回可以迭代对象的函数
在Python中,使用了"yield"的函数被称为生成器(generator)
跟普通函数不同的是,生成器是一个返回迭代器的函数,只能用于迭代操作,更简单点理解生成器就是一个迭代器
在调用生成器运行的过程中,每次遇到"yield"时函数会暂停并保存当前所有的运行信息,返回yield的值,并在下一次执行 next()方法时从当前位置继续运行
调用一个生成器函数,返回的是一个迭代器对象

def fibonacci(n):  # 生成器函数 - 斐波那契
    a, b, counter = 0, 1, 0
    while True:
        if (counter > n):
            return
        yield a
        a, b = b, a + b
        counter += 1

f = fibonacci(10)  # f 是一个迭代器，由生成器返回生成

while True:
    try:
        print(next(f), end=" ")
    except StopIteration:
        sys.exit()
输出结果为:
0 1 1 2 3 5 8 13 21 34 55


