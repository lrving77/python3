#!/bin/bash/python3
# -*- coding:UTF-8 -*-
#file_name:study-python

1、开始学习第一个编程
#编写一个斐波纳契数列
a, b = 0, 1  #两个元素的总和确定了下一个数
while b < 10:
    print(b)
    a , b = b, a+b
输出结果为:
1
1
2
3
5
8
综上所诉:第一行包含了一个复合赋值;变量"a"和"b"同时得到新值"0"和"1";最后一行再次使用了同样的方法,
        可以看到,右边的表达式会在赋值变动之前执行;右边表达式的执行顺序是从左往右的

#end关键字
关键字"end"用于将结果输出到同一行,或者在输出的末尾添加不同的字符
a, b = 0, 1  #两个元素的总和确定了下一个数
while b < 10:
    print(b, end=" ")
    a , b = b, a+b
输出结果为:
1 1 2 3 5 8    #相较于上面的此输出结果是横向排列

#============Python3条件控制============
Python条件语句是通过一条或多条语句的执行结果(True或者False)来决定执行的代码块

#if语句
Python中使用"elif"代替了"else if",所以"if"语句的关键字为: if-elif-else
if语句的格式为:
if a:
    a1
elif b:
    b1
else:
    c
格式说明: 
    如果"a"为True,则执行"a1"的语句
    如果"a"为False，将判断"b"
    如果"b"为True,则执行"b1"的语句
    如果"b"为False,则执行"c"语句
    依次类推,这就是"if"语句的格式
需要注意:
    每个条件的后面要使用":",表示接下来是满足条件后要执行的语句块
    使用缩进来划分语句块,相同缩进数的语句在一起组成一个语句块
    在Python中没有switch-case语句

if中常用的操作运算符:
<    #小于
<=   #小于或等于
>    #大于
>=   #大于等于
==   #等于,比较两个值是否相等
!=   #不等于

示例1:
a = 10
if a:
    print(a)

b = 0
if b:
    print(b)
print("Bye")

输出结果为:
10
Bye

由此可看出变量b为0,所以对应的if内的语句没有执行

示例2:
#根据输入年龄选择要办理申请信用卡的额度
age = int(input("请输入你的年龄: "))
if  18<= age <=22:
    print("您最高可申请3000元的申请额度!")
elif 22< age <=30:
    print("您最高可申请30000元的申请额度!")
elif 30< age <=60:
    print("您最高可申请100000元的申请额度!")
else:
    print("对不起,您不能申请信用卡额度")

输出结果为:
请输入你的年龄: 12
对不起,您不能申请信用卡额度

#if嵌套
在嵌套if语句中,可以把"if...elif...else"结构放在另外一个"if...elif...else"结构中
if 表达式1:
    语句
    if 表达式2:
        语句
    elif 表达式3:
        语句
    else:
        语句
elif 表达式4:
    语句
else:
    语句

示例:
num=int(input("输入一个数字："))
if num%2==0:
    if num%3==0:
        print ("你输入的数字可以整除 2 和 3")
    else:
        print ("你输入的数字可以整除 2，但不能整除 3")
else:
    if num%3==0:
        print ("你输入的数字可以整除 3，但不能整除 2")
    else:
        print  ("你输入的数字不能整除 2 和 3")

输出结果为:
输入一个数字：91
你输入的数字不能整除 2 和 3


#============Python3循环============
Python中的循环语句有"for"和"while"

#======while语句======
Python中"while"语句的格式:
while 判断条件(condition):
    执行语句(statements)

使用了while来计算1到100的总和(1+2+3+4+5+......+100=?)
x = 0
y = 1
while y <= 100:
      x = x + y
      y = y +1
print(x)
输出结果为:
5050

#while无限循环
通过设置条件表达式永远不为 false 来实现无限循环
a = 1
while a == 1:
    b = int(input("请输入一个数字:"))
    print("您输入的数字是:",b)
输出结果为:
请输入一个数字:1
您输入的数字是: 1
请输入一个数字:2
您输入的数字是: 2
请输入一个数字:5
您输入的数字是: 5
请输入一个数字:

#while循环使用else语句
在while...else条件语句为false时执行else的语句块
语法格式:
while a:
    b
else:
    c
示例:
循环输出数字,并判断大小
a = 1
while a < 5:
    print(a, "小于5")
    a = a + 1
else:
    print(a,"大于或等于5")
输出结果为:
1 小于5
2 小于5
3 小于5
4 小于5
5 大于或等于5

简单语句组
类似if语句的语法,如果你的while循环体中只有一条语句,你可以将该语句与while写在同一行中
a = 1
while (a):print('Welcome To Python3')
输出结果为:
Welcome To Python3
Welcome To Python3
Welcome To Python3
Welcome To Python3
Welcome To Python3
..................


#======for语句======
Python for循环可以遍历任何序列的项目,如一个列表或者一个字符串
for 循环格式:
for x in y:
    a语句
else:
    b语句

示例1:
遍历一个列表:
list = ['lakes','james',23,'age',34.0]
for x in list:
    print(x)
输出结果为:
lakes
james
23
age
34.0

for 使用break语句,break 语句用于跳出当前循环体
list = ['lakers','james',23,'cavaliers','lrving',2.0]
for x in list:
    if x == "lrving":
        print('遍历得到的值:', x)
        break
    print("没有跳出循环取得的值:", x)
else:
    print("循环结束")
输出结果为:
没有跳出循环取得的值: lakers
没有跳出循环取得的值: james
没有跳出循环取得的值: 23
没有跳出循环取得的值: cavaliers
遍历得到的值: lrving

#range()函数
遍历数字序列,可以使用内置range()函数;它会生成数列
for x in range(5):
    print(x)
输出结果为:
0
1
2
3
4

也可以使用range指定区间的值
for x in range(1,6):
    print(x)
输出结果为:
1
2
3
4
5

也可以使range以指定数字开始并指定不同的增量(甚至可以是负数,有时这也叫做'步长')
for x in range(1,10,2):
    print(x)
输出结果为:
1
3
5
7
9

for x in range(-20,-30,-3):
    print(x)
输出结果为:
-20
-23
-26
-29

结合range()和len()函数以遍历一个序列的索引
list = ['lakers','james',23,'cavaliers','lrving',2.0]
for x in range(len(list)):
    print(x,list[x])
输出结果为:
0 lakers
1 james
2 23
3 cavaliers
4 lrving
5 2.0

使用range()函数来创建一个列表
print(list(range(1,6)))
输出结果为:
[1, 2, 3, 4, 5]

#"break"和"continue"语句及循环中的else子句
break:    语句可以跳出 for 和 while 的循环体;如果你从 for 或 while 循环中终止,任何对应的循环 else 块将不执行
continue: 语句被用来告诉 Python 跳过当前循环块中的剩余语句,然后继续进行下一轮循环

注意: break是"跳出"某一个循环;continue是"跳过"某一个循环
      跳出与跳过的区别

while中使用break
n = 5
while n > 0:
    n -= 1
    if n == 2:
        break
    print(n)
print('循环结束')
输出结果为:
4
3
循环结束


while 中使用 continue：
n = 5
while n > 0:
    n -= 1
    if n == 2:
        continue
    print(n)
print('循环结束')
输出结果为:
4
3
1
0
循环结束


#用于查询质数的循环
for n in range(2, 10):
    for x in range(2, n):
        if n % x == 0:
            print(n, '等于', x, '*', n//x)
            break
    else:
        # 循环中没有找到元素
        print(n, '是质数')
输出结果为:
2 是质数
3 是质数
4 等于 2 * 2
5  是质数
6 等于 2 * 3
7 是质数
8 等于 2 * 4
9 等于 3 * 3


#pass 语句
pass是空语句,是为了保持程序结构的完整性
pass不做任何事情,一般用做占位语句

for letter in 'Runoob': 
   if letter == 'o':
      pass
      print ('执行 pass 块')
   print ('当前字母 :', letter)

输出结果为:

当前字母 : R
当前字母 : u
当前字母 : n
执行 pass 块
当前字母 : o
执行 pass 块
当前字母 : o
当前字母 : b

















