#!/bin/bash/python3
# -*- coding:UTF-8 -*-
#file_name:study-python

Python有6个序列的内置类型,但最常见的是列表和元组
序列都可以进行的操作包括索引,切片,加,乘,检查成员
Python已经内置确定序列的长度以及确定最大和最小的元素的方法

#============列表============
列表是最常用的Python数据类型,它可以作为一个方括号内的逗号分隔值出现
列表的数据项不需要具有相同的类型
创建一个列表,只要把逗号分隔的不同的数据项使用方括号括起来即可
list = ['lakers','james',23,'heat',6]

#读取列表中的值
list = ['lakers','james',23,'heat',6]
print(list[0])
print(list[1:4])
输出结果为:
lakers
['james', 23, 'heat']

#更新列表
list = ['lakers','james',23,'heat',6]
print(list[1])
list[1] = 'kobe'   #将列表的第二个元素更新为"kobe"
print(list[1])
输出结果为:
james
kobe

#删除列表元素
list = ['lakers','james',23,'heat',6]
print(list[3])
del list[3]     #删除第4个元素
print(list)
输出结果为:
heat
['lakers', 'james', 23, 6]

#Python列表脚本操作符
列表对 + 和 * 的操作符与字符串相似; + 号用于组合列表, * 号用于重复列表
表达式                                   结果                           描述
len([1, 2, 3])	                        3                              长度
[1, 2, 3] + [4, 5, 6]	                [1, 2, 3, 4, 5, 6]             组合
['Hi!'] * 4	                            ['Hi!', 'Hi!', 'Hi!', 'Hi!']   重复
3 in [1, 2, 3]	                        True	                       元素是否存在于列表中
for x in [1, 2, 3]: print(x, end=" ")	1 2 3	                       迭代

#Python列表截取与拼接
Python的列表截取与字符串操作类型
1、截取
list = ['lakers','james',23,'heat',6]
print(list[2])
print(list[-2])
print(list[1:])
输出结果为:
23
heat
['james', 23, 'heat', 6]

2、拼接
list = ['lakers','james',23,'heat',6]
list += ['haet','wade',3]
print(list)
输出结果为:
['lakers', 'james', 23, 'haet', 6, 'haet', 'wade', 3]

#嵌套列表
使用嵌套列表即在列表里创建其它列表
a = ['one','two','three','four','five']
b = [1,2,3,4,5]
c = [a,b,'six']     #在列表c中嵌套列表a和列表b
print(c)
输出结果为:
[['one', 'two', 'three', 'four', 'five'], [1, 2, 3, 4, 5], 'six']

#Python列表函数&方法
1、len(list): 列表元素个数
list = ['lakers','james',23,'heat',6]
list = ['lakers','james',23,'heat',6]
print(len(list))
输出结果为:
  5

2、max(list): 返回列表元素最大值
list,list1 = ['lakers','james','heat'],[1,2,3,4,5]
print(max(list))
print(max(list1))
输出结果为:
  lakers
  5

注意: Python不支持在一个列表中进行不同类型的元素做比较

3、min(list): 返回列表元素最小值
list,list1 = ['lakers','james','heat'],[1,2,3,4,5]
print(min(list))
print(min(list1))
输出结果为:
  heat
  1

4、list(seq): 将元组转换为列表
参数:
seq -- 要转换为列表的元组或字符串
a = (123,'lakers','james','heat')
b = list(a)
print(b)
输出结果为:
  [123, 'lakers', 'james', 'heat']


Python包含以下方法:
序号	方法
list.append(obj): 在列表末尾添加新的对象
list.count(obj):  统计某个元素在列表中出现的次数
list.extend(seq): 在列表末尾一次性追加另一个序列中的多个值（用新列表扩展原来的列表）
list.index(obj):  从列表中找出某个值第一个匹配项的索引位置
list.insert(index, obj): 将对象插入列表
list.pop([index=-1]): 移除列表中的一个元素（默认最后一个元素），并且返回该元素的值
list.remove(obj): 移除列表中某个值的第一个匹配项
list.reverse(): 反向列表中元素
list.sort( key=None, reverse=False): 对原列表进行排序
list.clear(): 清空列表
list.copy(): 复制列表


#============元组============
Python 的元组与列表类似,不同之处在于元组的元素不能修改
元组使用小括号,列表使用方括号
元组创建很简单,只需要在括号中添加元素,并使用逗号隔开即可
创建一个空元组的格式: tuple = ();
tuple = ()
print(type(tuple))
输出结果为:
<class 'tuple'>

tuple = ('lakers','james',23,'heat','wade',3)
tuple1 = 'lakers','AD',3    #不要'()'也可以
print(tuple)
print(tuple1)
输出结果为:
('lakers', 'james', 23, 'heat', 'wade', 3)
('lakers', 'AD', 3)

元组中只包含一个元素时,需要在元素后面添加逗号,否则括号会被当作运算符使用
示例:
tuple = (50)  #不加逗号,显示为整数
print(type(tuple))
<class 'int'>

tuple = (50,) #加上逗号,显示为元组
print((type(tuple)))
<class 'tuple'>

#访问元组
元组可以使用下标索引来访问元组中的值
tuple = ('lakers','james',23,'heat','wade',3)
print(tuple[0])
print(tuple[1:4])
输出结果为:
lakers
('james', 23, 'heat')

#修改元组
元组中的元素值是不允许修改的,但我们可以对元组进行连接组合
tuple = ('lakers','james',23,'heat','wade',3)
tuple1 = (1,'two','three','four','five')
tuple2 = tuple + tuple1
print(tuple2)
输出结果为:
('lakers', 'james', 23, 'heat', 'wade', 3, 1, 'two', 'three', 'four', 'five')

#将列表作为元组的元素,此时列表中的元素可以修改
a = ['lakers','james',23,'heat',6]
b = ['haet','wade',3]
c = (a,b)
print(c)
输出结果为:
(['lakers', 'james', 23, 'heat', 6], ['haet', 'wade', 3])

修改a列表中的元素:
a[1] = 'kobe'
c = (a,b)
print(c)
输出结果为:
(['lakers', 'kobe', 23, 'heat', 6], ['haet', 'wade', 3])

#删除元组
元组中的元素值是不允许删除的,但我们可以使用del语句来删除整个元组
tup = ('lakers','james',23,'heat','wade',3)
print(tup)
del tup;
print(tup)
输出结果为:(有异常信息)
Traceback (most recent call last):
  File "/Users/liwenfeng/PycharmProjects/Python/study.py", line 115, in <module>
    print(tup)
NameError: name 'tup' is not defined
('lakers', 'james', 23, 'heat', 'wade', 3)
删除后的元组tup:
以上说明元组tup已经删除了,所以出现了报错: NameError: name 'tup' is not defined

#元组运算符
1、计算元组中元素的个数
语法格式: len(tuple)
tuple = ('lakers','james',23,'heat','wade',3)
print(len(tuple))
输出结果为:
6

2、连接元素
语法格式: tuple1 + tuple2
tuple1 = ('lakers','james',23,'heat',6)
tuple2 = ('haet','wade',3)
tuple3 = tuple1 + tuple2
print(tuple3)
输出结果为:
('lakers', 'james', 23, 'heat', 6, 'haet', 'wade', 3)

3、复制
语法格式: tuple * 2
tuple = ('lakers','james',23,'heat','wade',3)
print(tuple * 2)
输出结果为:
('lakers', 'james', 23, 'heat', 'wade', 3, 'lakers', 'james', 23, 'heat', 'wade', 3)


4、判断元素是否存在
语法格式: x in tuple
返回结果: True False
tuple = ('lakers','james',23,'heat','wade',3)
print('james' in tuple)
print('kobe' in tuple)
输出结果为:
True
False

5、迭代(循环遍历)
取值: 就是从 元组 中过去储存在指定位置的数据
遍历: 就是 从头到尾 依次 从 元组 中获取数据
在python中,可以使用"for"循环遍历所有非数字类型的遍历:列表、元组、字典以及字符串
在实际开发中,除非能够确认元组中的数据类型,否则针对元组的循环遍历需求并不多
语法格式: 
for x in tuple:
    #循环内部针对元组元素进行操作
    print(x)

示例:
tuple = ('lakers','james',23,'heat','wade',3)
for x in tuple:
    #将元组tuple中的元素一次取出
    print(x)
输出结果为:
lakers
james
23
heat
wade
3

#元组索引,截取
因为元组也是一个序列,所以我们可以访问元组中的指定位置的元素,也可以截取索引中的一段元素
元组的索引和截取与字符串,列表类似


#元组内置函数
1、len(tuple): 计算元组元素个数
tuple = ('lakers','james',23,'heat','wade',3)
print(len(tuple))
输出结果为:
6

2、max(tuple): 返回元组中元素最大值
tuple,tuple1 = ('lakers','james','heat'),(1,2,3,4,5)
print(max(tuple))
print(max(tuple1))
输出结果为:
  lakers
  5

3、min(tuple): 返回元组中元素最小值
tuple,tuple1 = ('lakers','james','heat'),(1,2,3,4,5)
print(min(tuple))
print(min(tuple1))
输出结果为:
  heat
  1

4、tuple(seq): 将列表转换为元组
a = [123,'lakers','james','heat']
b = tuple(a)
print(b)
输出结果为:
  (123, 'lakers', 'james', 'heat')










